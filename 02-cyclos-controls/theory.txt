
Pasar información por valor y referencia

    Cuando trabajamos con primitivos, cualquier asignación a variables o asignaciones a los argumentos de las funciones, lo estás enviando por valor, es decir, no estás afectando el disco local en memoria, solo estás pasando el valor

    Cuándo se pasa por referencia y cuándo no?

        Todos los objetos son pasados por referencia mientras que todos los primitivos(boolean, null, undefined, strings, numbers, symbols) se pasan por valor
        Explicación: https://keepcoding.io/blog/pasar-variable-por-valor-referencia-javascript/#
    
    Para romper estas referencias, tienes que usar el operador 'spread' que son los 3 puntos antes del valor ' ... ' que si se pone entre los paréntesis, en un argumento, se comporta como un parámetro 'rest', lo que quiere decir es que junta todos los argumentos en una sola variable y lo transforma en un arreglo.
    Solo y tan solo se comporta como un 'rest' dentro de paréntesis, en argumentos, sino siempre es un 'spread'
    Aquí la info: https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Spread_syntax

-----------------------

Estructuras de control

    Son aquellas estructuras que te permiten controlar como fluye el flujo de lectura teniendola capacidad de repetir, volver o seguir
    Estas estructuras son los if - else

------------------

Lógica booleana

-------------------

Operadores Ternarios

------------------

Ciclos While y Do While

    Ambos sirven para lo mismo pero La diferencia entre el ciclo while y el do while es que en el primero la secuencia se ejucuta hasta que la condición en el while sea falsa, y en el do while la secuencia se ejecuta y luego se evalual la condición, si esta es verdadera se vuelve a ejecutar la secuencia hasta que sea falsa.

-------------------

Ciclos for

--------------------

DOM - Document object Media

    El DOM solo funciona en la web ya que es algo "visual" y es la manipulación de elementos del html a través de js
    Esta manipulación se inicializa con la palabra ' document. '
    Algunas instrucciones son:

        - document.querySelector( ' ' ); -> esto te permite seleccionar un elemento del html que dependerá de lo que pongas entre las comillas
        - document.querySelector('').innerText = algo ; -> permite poner cualquier tipo de texto sea string o número 
        - document.querySelector('').innerHTML = algo ; -> la diferencia es que este me permite poner cualquier elemento HTML donde yo lo esté seleccionando, permite por div, h2, h3, etc Todo lo que tenga que ver con elemento HTML, el prinero es solo para texto
        - document.getElementById ('') ;
        - document.getElementByClassName ('') ;
        - document.body(); -> hace referencia a todo el body y si después del body hago un .append() es para añadirle algo, como si fuera un elemento más
    
    En los querySelector que no se especifíca nada de Id o className, si queremos señalar a una clase o a un id tendremos que poner antes de su nombre identificativo y un # o un . respectivamente
    Para hacer un programa más eficiente estos documents los guardamos en variables para llamarlos cuando hagan falta y así no repetir código

    Creacion de elementos desde cero en el DOM

        - document.createElement (''); -> esto espera un tag-name, es decir, un elemento de html, no un nombre de una clase
        - (nombre del elemento al que quieres añadirle algo).appendChild ( lo que queires añadirle ); propiedad que permite crear nuevos elementos y añadirlos al que quieras
        - (nombre elemento).classList.add(nombre de la clase que quieres añadirle al elemento);