
Creación de variables

    Hay 3 formas de crear veariables:
        - var: una forma antigua de crear variables la cual NO DEBES USAR. Otro problema que estas tienen es que permiten guardar información que puede llegar a confundirse con las propierdades del window.
        Esta solo es para navegadores viejos
        - let: forma correcta de crear variables capaces de cambiar de valor. Estas no interfieren con window 
        - const: varables en la memoria que no pueden cambiar
    (Polyfill: código que provee el funcionamiento de nuevas caracte. de JS (ES6) en versiones viejas)

---------------------
- Lo que lleva paréntesis son funciones o métodos y lo de su interior, son los argumentos o parámetros que recibe

- El script en html se colóca al final del body por buenas prácticas y por los posibles elementos bloqueantes que hayan en el .js que no dejen seguir cargando el propio html.
El orden de las importaciones importan ya que si dependen de otros files, no se encontrará la info. si no es en el orden que debe

- Null ≠ undefined

----------------------

Prompt, confirm y alert

    Son formas de interactuar con los usuarios. Estas son bloqueantes, es decir, no deja que nada más pase o cargue hasta que el usuario haya realizado la acción que se le pide, en este caso dar a botones o rellenar algún Prompt

    Estas son funciones que está dentro del objeto window. Si el código va a funcionar en un backend(node), el objeto window no existe y se tiene que llamar el objeto 'global'

    Ej:
        - alert(' '); -> tiene para dar ok o cancel
        - prompt (' ') -> te da para rellenar un campo o dejarlo undefined
        - confirm (' ') -> te da para responder si o no y devuelve un boolean

------------------------

Datos Primitivos

    js es un lenguaje de tipado débil, es decir, no hace falta decir que es lo qeu vamos a hacer o guardar en una variable 
    Los valores primitivos son valores que no son objetos y que son inmutables, hay 6 tipos:
        1. boolean (true/false)
        2. Null (se puede ver tb como un objeto)
        3. undefined
        4. Numbers
        5. Strings
        6. Symbols -> es un valor único que no pueden ser iguales
    
-----------------------

Palabras reservadas

    Hay palabras que no puedes usar porque js u otros archivos las usan para acciones específicas como son: const, var, let, if, for, while, try, etc.

    No puedes poner let const = 123; Esto te dará errror. Pero si puedes poner let constante = 123; porqeu es en español y no es esa keyword

    Página para validar si la palabra que vas a usar se permite o no:
    https://mothereff.in/js-variables#ಠ%5fಠ

    Página para saber que palabras existen:
    https://mathiasbynens.be/notes/javascript-identifiers

    No debes usar carácteres especiales, aunque los lea porque pueden dar errores. Esto uncluye la ' ñ '

    Red flag para nombrar variables:
        - No se puede iniciar por números
        - No iniciar por mayúsculas
        - No poner puntos (significa que quieres un método)
        - No colocar carácteres especiales 

--------------------------

Arreglos / arrays 

    Son objetos parecidos a una lista de información que contienen un grupo de elementos y de caracterizan por :
        Estar entre corchetes(lisos) [ ]
        Empiezan por la posición 0
    Todos los arreglos normalmente tienen el mismo tipo de datos(strings, numbers, symbols, etc)

    En el file de array.js también hay teoría sobre los distintos métodos de los arrays

----------------------------

Objetos Literales

    Son aquellos que tienen corchetes curvos { } y siempre tienen un par de valores:
        - key: 
        - value:
    Pueden tener los elementos que quieran pero siempre estos dos valores
    Para obtener los valores de las llaves, tienes que poner el nombre de la variable, un punto y el nombre de la key, es decir,
        heroe(nombre de la variable).nombre(key) -> Tony Stark(value de la key)
    En el literal-object.js también hay teoría a cerca de:
        - conversión de objetos a arrays
        - sacar info del propio objeto, sea cual sea el tipo de info (array, objetos, numeros, etc)
    
    Propiedades de todos los objetos: https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Object

------------------------------

Diferencia entre función y método

    Un método es una funcion que se encuentra dentro de un objeto mientras que una función es un pedazo de código el cual contiene elementos que vamos a reutilizar

------------------------------

Funciones 

    Buenas prácticas: colocarlas al inicio del file
    Si una función no tiene un 'return' explícito, devuelve undefined